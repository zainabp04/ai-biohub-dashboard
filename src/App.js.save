import React, { useState, useEffect } from 'react';
import { TrendingUp, Building, User, AlertCircle } from 'lucide-react';
import Papa from 'papaparse';
import './App.css';

export default function AIBioHubDashboard() {
  const [csvData, setCsvData] = useState([]);
  const [dataLoaded, setDataLoaded] = useState(false);
  const [activeView, setActiveView] = useState('overview');
  const [selectedTeam, setSelectedTeam] = useState('all');
  const [selectedMentor, setSelectedMentor] = useState('all');
  const [error, setError] = useState('');

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const response = await fetch('/ai-biohub-survey-data.csv');
      if (!response.ok) {
        throw new Error('Failed to load CSV file');
      }
      const fileContent = await response.text();
      
      const result = Papa.parse(fileContent, {
        header: true,
        dynamicTyping: true,
        skipEmptyLines: true
      });
      
      setCsvData(result.data);
      setDataLoaded(true);
      
    } catch (error) {
      setError(`Error loading data: ${error.message}`);
      setDataLoaded(true);
    }
  };

  const teamData = csvData.filter(d => d['Select team / mentor '] && 
d['Select team / mentor '] !== 'I am a mentor');
  const mentorData = csvData.filter(d => d['Select team / mentor '] === 'I 
am a mentor');
  const teams = [...new Set(teamData.map(d => d['Select team / mentor 

']))].sort();
  const mentors = [...new Set(mentorData.map(d => d.Name))].sort();

  if (!dataLoaded) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center 
justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 
border-red-800 mx-auto mb-4"></div>
          <p className="text-gray-700">Loading AI BioHub dashboard...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center 
justify-center">
        <div className="text-center bg-white p-8 rounded-lg shadow">
          <AlertCircle className="h-12 w-12 text-red-600 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error 
Loading Data</h2>
          <p className="text-gray-600">{error}</p>
          <p className="text-sm text-gray-500 mt-4">Make sure your CSV 
file is uploaded to the public folder</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-white shadow-sm border-b border-gray-300">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">AI BioHub 
Dashboard</h1>
              <p className="text-gray-600">{csvData.length} responses • 
{teams.length} teams • {mentors.length} mentors</p>
            </div>
            <div className="flex space-x-4">
              <button onClick={() => setActiveView('overview')} 
className={`px-4 py-2 rounded-lg flex items-center transition-colors 
${activeView === 'overview' ? 'bg-red-800 text-white' : 'bg-gray-200 
text-gray-700 hover:bg-gray-300'}`}>
                <TrendingUp className="h-4 w-4 mr-2" />
                Overview
              </button>
              <button onClick={() => setActiveView('teams')} 
className={`px-4 py-2 rounded-lg flex items-center transition-colors 
${activeView === 'teams' ? 'bg-red-800 text-white' : 'bg-gray-200 
text-gray-700 hover:bg-gray-300'}`}>
                <Building className="h-4 w-4 mr-2" />
                Teams
              </button>
              <button onClick={() => setActiveView('mentors')} 
className={`px-4 py-2 rounded-lg flex items-center transition-colors 
${activeView === 'mentors' ? 'bg-red-800 text-white' : 'bg-gray-200 
text-gray-700 hover:bg-gray-300'}`}>
                <User className="h-4 w-4 mr-2" />
                Mentors
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeView === 'overview' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-6 border 
border-gray-200">
              <h2 className="text-2xl font-bold text-gray-900 
mb-6">Program Overview</h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900">Total 
Responses</h3>
                  <p className="text-2xl font-bold 
text-red-600">{csvData.length}</p>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900">Active 
Teams</h3>
                  <p className="text-2xl font-bold 
text-red-600">{teams.length}</p>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900">Team 
Responses</h3>
                  <p className="text-2xl font-bold 
text-red-600">{teamData.length}</p>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900">Mentor 
Responses</h3>
                  <p className="text-2xl font-bold 
text-red-600">{mentorData.length}</p>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg shadow p-6 border 
border-gray-200">
                <h3 className="text-xl font-bold text-gray-900 mb-4">Teams 
Overview</h3>
                <div className="space-y-3">
                  {teams.map(team => {
                    const teamResponses = teamData.filter(d => d['Select 
team / mentor '] === team);
                    return (
                      <div key={team} className="flex justify-between 
items-center p-3 bg-gray-50 rounded">
                        <span className="font-medium 
text-gray-900">{team}</span>
                        <div className="text-sm 
text-gray-600">{teamResponses.length} responses</div>
                      </div>
                    );
                  })}
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6 border 
border-gray-200">
                <h3 className="text-xl font-bold text-gray-900 
mb-4">Mentors Overview</h3>
                <div className="space-y-3">
                  {mentors.map(mentor => {
                    const mentorResponses = mentorData.filter(d => d.Name 
=== mentor);
                    return (
                      <div key={mentor} className="flex justify-between 
items-center p-3 bg-gray-50 rounded">
                        <span className="font-medium 
text-gray-900">{mentor}</span>
                        <div className="text-sm 
text-gray-600">{mentorResponses.length} responses</div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}

        {activeView === 'teams' && (
          <div className="bg-white rounded-lg shadow p-6 border 
border-gray-200">
            <h2 className="text-2xl font-bold text-gray-900 
mb-4">Teams</h2>
            <p>Teams functionality coming soon...</p>
          </div>
        )}

        {activeView === 'mentors' && (
          <div className="bg-white rounded-lg shadow p-6 border 
border-gray-200">
            <h2 className="text-2xl font-bold text-gray-900 
mb-4">Mentors</h2>
            <p>Mentors functionality coming soon...</p>
          </div>
        )}
      </div>
    </div>
  );
}
